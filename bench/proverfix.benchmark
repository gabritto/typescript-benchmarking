{
  "version": "2",
  "date": "2024-01-26T05:49:01.878Z",
  "system": {
    "platform": "linux",
    "release": "5.15.133.1-microsoft-standard-WSL2",
    "arch": "x64",
    "totalmem": 33632350208,
    "freemem": 32500428800,
    "hostname": "CPC-gabri-8SHBT",
    "username": "gabrielaa",
    "cpus": [
      {
        "model": "AMD EPYC 7763 64-Core Processor",
        "speed": 0
      },
      {
        "model": "AMD EPYC 7763 64-Core Processor",
        "speed": 0
      },
      {
        "model": "AMD EPYC 7763 64-Core Processor",
        "speed": 0
      },
      {
        "model": "AMD EPYC 7763 64-Core Processor",
        "speed": 0
      },
      {
        "model": "AMD EPYC 7763 64-Core Processor",
        "speed": 0
      },
      {
        "model": "AMD EPYC 7763 64-Core Processor",
        "speed": 0
      },
      {
        "model": "AMD EPYC 7763 64-Core Processor",
        "speed": 0
      },
      {
        "model": "AMD EPYC 7763 64-Core Processor",
        "speed": 0
      },
      {
        "model": "AMD EPYC 7763 64-Core Processor",
        "speed": 0
      },
      {
        "model": "AMD EPYC 7763 64-Core Processor",
        "speed": 0
      },
      {
        "model": "AMD EPYC 7763 64-Core Processor",
        "speed": 0
      },
      {
        "model": "AMD EPYC 7763 64-Core Processor",
        "speed": 0
      },
      {
        "model": "AMD EPYC 7763 64-Core Processor",
        "speed": 0
      },
      {
        "model": "AMD EPYC 7763 64-Core Processor",
        "speed": 0
      },
      {
        "model": "AMD EPYC 7763 64-Core Processor",
        "speed": 0
      },
      {
        "model": "AMD EPYC 7763 64-Core Processor",
        "speed": 0
      }
    ]
  },
  "predictable": true,
  "repository": {
    "type": "git",
    "url": "https://github.com/microsoft/typescript.git",
    "branch": "gabritto/d2-detect",
    "commit": "1f45a76a5e89ef2dcef45583463d4bb582d94e5a",
    "date": "2024-01-26T05:29:09.000Z",
    "subject": "Merge remote-tracking branch 'origin/gabritto/d2-detect' into gabritto/d2-detect"
  },
  "iterations": 10,
  "scenarios": [
    {
      "name": "overloadperf",
      "kind": "tsc",
      "args": [
        "-p",
        "${suiteDirectory}/overloadperf/tsconfig.json"
      ]
    }
  ],
  "hosts": [
    {
      "name": "node",
      "arch": "x64",
      "platform": "linux",
      "version": "v20.11.0",
      "executable": "/home/gabrielaa/.volta/tools/image/node/20.11.0/bin/node",
      "default": false,
      "current": true
    }
  ],
  "measurements": [
    {
      "name": "overloadperf - node (v20.11.0, x64)",
      "scenarioName": "overloadperf",
      "scenarioArgs": 0,
      "hostName": "node (v20.11.0, x64)",
      "hostIndex": 0,
      "host": {
        "name": "node",
        "version": "v20.11.0",
        "arch": "x64"
      },
      "parseTime": {
        "metric": "Parse Time",
        "samples": [
          0.92,
          0.9,
          0.91,
          0.91,
          0.91,
          0.9,
          0.91,
          0.91,
          0.91,
          0.91
        ],
        "mean": 0.909,
        "minimum": 0.9,
        "maximum": 0.92,
        "marginOfError": 0.003999382396765229,
        "variance": 0.00003222222222222229,
        "standardDeviation": 0.005676462121975473,
        "relativeMarginOfError": 0.004399760612503002,
        "unit": "s",
        "precision": 2
      },
      "bindTime": {
        "metric": "Bind Time",
        "samples": [
          0.43,
          0.42,
          0.42,
          0.42,
          0.42,
          0.42,
          0.42,
          0.42,
          0.42,
          0.42
        ],
        "mean": 0.421,
        "minimum": 0.42,
        "maximum": 0.43,
        "marginOfError": 0.0022280000000000012,
        "variance": 0.000010000000000000013,
        "standardDeviation": 0.003162277660168381,
        "relativeMarginOfError": 0.0052921615201900266,
        "unit": "s",
        "precision": 2
      },
      "checkTime": {
        "metric": "Check Time",
        "samples": [
          0.4,
          0.39,
          0.39,
          0.39,
          0.39,
          0.39,
          0.39,
          0.39,
          0.39,
          0.39
        ],
        "mean": 0.3910000000000001,
        "minimum": 0.39,
        "maximum": 0.4,
        "marginOfError": 0.0022280000000000025,
        "variance": 0.000010000000000000021,
        "standardDeviation": 0.003162277660168383,
        "relativeMarginOfError": 0.005698209718670081,
        "unit": "s",
        "precision": 2
      },
      "emitTime": {
        "metric": "Emit Time",
        "samples": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        "mean": 0,
        "minimum": 0,
        "maximum": 0,
        "marginOfError": 0,
        "variance": 0,
        "standardDeviation": 0,
        "relativeMarginOfError": null,
        "unit": "s",
        "precision": 2
      },
      "totalTime": {
        "metric": "Total Time",
        "samples": [
          1.74,
          1.72,
          1.72,
          1.72,
          1.72,
          1.71,
          1.72,
          1.73,
          1.72,
          1.73
        ],
        "mean": 1.723,
        "minimum": 1.71,
        "maximum": 1.74,
        "marginOfError": 0.005800412092640014,
        "variance": 0.0000677777777777779,
        "standardDeviation": 0.008232726023485654,
        "relativeMarginOfError": 0.003366460877910629,
        "unit": "s",
        "precision": 2
      },
      "memoryUsed": {
        "metric": "Memory used",
        "samples": [
          89321,
          89321,
          89321,
          89321,
          89321,
          89321,
          89321,
          89321,
          89321,
          89321
        ],
        "mean": 89321,
        "minimum": 89321,
        "maximum": 89321,
        "marginOfError": 0,
        "variance": 0,
        "standardDeviation": 0,
        "relativeMarginOfError": 0,
        "unit": "k",
        "precision": 0
      }
    }
  ]
}