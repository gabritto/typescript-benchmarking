pr: none
trigger: none

resources:
  repositories:
    - repository: TypeScript
      type: github
      endpoint: Microsoft
      name: microsoft/TypeScript

  # https://stackoverflow.com/a/63276774
  pipelines:
    - pipeline: ts-main-pipeline
      source: 'TypeScript pipeline trigger'
      trigger:
        branches:
          include:
            - main

  # - name: azureSubscription
  #   value: 'TypeScript Internal Services'
  # - name: KeyVaultName
  #   value: 'jststeam-passwords'
  # - name: SecretsFilter
  #   value: 'tslab1-mseng-PAT, tsperf-azure-storage-connection-string'

parameters:
  # TODO: Accept objects instead? Or, split on comma?
  - name: TSPERF_HOSTS
    type: string
    default: '--host node@18.10.0 --host node@16.17.1 --host node@14.21.3'
  - name: TSPERF_ITERATIONS
    type: number
    default: 10
  # TODO: the default set should probably be defined by the benchmarking repo
  - name: TSPERF_SCENARIOS
    type: string
    default: '--scenario Angular --scenario Monaco --scenario TFS --scenario material-ui --scenario Compiler-Unions --scenario xstate'

variables:
  # This is just the version of node used to build TypeScript, run ts-perf, etc.
  # The actual benchmarked node version is controlled by ts-perf.
  nodeVersion: '16.x'

  ts-ref: $[ resources.repositories['TypeScript'].ref ]

  ${{ if eq(resources.repositories['TypeScript'].ref, 'refs/pull/main') }}:
    ${{ if eq(variables['Build.Reason'], 'ResourceTrigger') }}:
      why: main
    ${{ else }}:
      why: main-manual
  # There's no way to trigger the pipeline this way from the UI, only via the
  # pipeline run API by giving it { "resources": { "repositories": { "TypeScript": { "refName": "refs/pull/<number>/merge" } } } }
  ${{ elseif and(startsWith(resources.repositories['TypeScript'].ref, 'refs/pull/'), endsWith(resources.repositories['TypeScript'].ref, '/merge')) }}:
    why: pr.${{ split(resources.repositories['TypeScript'].ref, '/')[2] }}
  ${{ else }}:
    why: unknown # TODO: fail?

# TODO: Generally, this pipeline should work like this:
#
# If the ref is "refs/heads/main", then we are processing a new commit to main,
# and should only run it once on a specific host, and upload to the blob store.
#
# If it's "refs/pull/<number>/merge", then we are processing a PR. HEAD will
# be the merge commit of the PR into main, where HEAD^1 will be the version
# of main that should be compared. We should run both for each benchmark.
#
# There's some ambiguity here in that we may want to manually rerun old commits
# from main. Pipelines also doesn't statically provide us with the "commit"
# parameter from a manual UI run, leaving us with only the ref, which may still
# say main even if the commit is old. TODO: work out these details
#
# To actually run the benchmark, we'll:
# - Configuration job
#   - Run on public agents; no need to use our pool for that.
#   - Clone the benchmark repo.
#   - Generate the build configuration from the parameters, the benchmark repo,
#     and info like the current time, commit refs/
#   - Generate a matrix of builds for each host/benchmark.
# - For each over the matrix
#   - In each build, clone everything, build everything, run benchmark.
#     - Run benchmark twice if PR, comment (or whatever new infra we need)
#     - Run benchmark once on designated baseline machine if main, upload blob.

name: $(why).$(Date:yyyyMMdd).$(Rev:r)
# Hide the commit message from the run name; it'll just always say that the
# build came from the benchmarking repo's commit.
appendCommitMessageToRunName: false

jobs:
  - job: Benchmark
    pool:
      name: ts-perf-ddfun
    # TODO: does this hurt perf?
    workspace:
      clean: all

    # TODO: matrix over parameterized tests

    steps:
      # TODO: figure out what perms are missing here
      # https://learn.microsoft.com/en-us/azure/devops/pipelines/release/key-vault-in-own-project?view=azure-devops&tabs=portal#query-and-use-secrets-in-your-pipeline
      # - task: AzureKeyVault@1
      #   inputs:
      #     # This info has been present in CI logs for years; consider these not secret.
      #     azureSubscription: $(azureSubscription)
      #     KeyVaultName: $(KeyVaultName)
      #     SecretsFilter: $(SecretsFilter)

      - bash: |
          echo ts-ref=$(ts-ref)
        displayName: Print info

      - bash: git config --global core.longpaths true
        displayName: Enable git long paths

      # These paths are relative to $(Pipeline.Workspace), which is the parent
      # directory of $(Build.SourcesDirectory), the default working directory.
      # TODO: pull these paths out as variables for reuse
      - checkout: self
        path: typescript-benchmarking
        fetchDepth: 1
        clean: true
      - checkout: TypeScript
        path: TypeScript
        fetchDepth: 2 # For PRs, we want the merge base to compare against. (TODO: only do this on PRs?)
        clean: true

      - bash: |
          cd $(Pipeline.Workspace)/TypeScript
          echo HEAD
          git log -1 HEAD
          echo HEAD^1
          git log -1 HEAD^1
          echo HEAD^2
          git log -1 HEAD^2

      - task: NodeTool@0
        inputs:
          versionSpec: $(nodeVersion)
        displayName: 'Install Node $(nodeVersion)'

      # The existence of this AzDo project/repository is not secret.
      # TODO: figure out why the delete is needed; how does the regular checkout step do a clean shallow clone?
      # Maybe this should instead use a service connection + checkout? (But, this is temporary anyway.)
      - bash: |
          rm -rf internal
          git clone --depth=1 https://mseng:${PAT}@mseng.visualstudio.com/Typescript/_git/Typescript internal
        env:
          PAT: $(tslab1-mseng-PAT)
        displayName: Clone internal repo

      # TODO: is yarn installed?
      - bash: |
          cd internal/scripts/perf
          yarn install --frozen-lockfile --prefer-offline
          yarn gulp build
        displayName: Build ts-perf

      # This is provided by the agent.
      - bash: sudo pyperf system tune
        displayName: Tune system

      - bash: node internal/scripts/perf/bin/ts-perf host install ${{ parameters.TSPERF_HOSTS }}
        displayName: Install hosts

      - bash: |
          cd $(Pipeline.Workspace)/TypeScript
          npm ci
          npm run build:compiler
        displayName: Build typescript

      - bash: |
          # local variables
          CHECKOUT=$(Pipeline.Workspace)/TypeScript
          COMMIT=$( git -C ${CHECKOUT} rev-parse HEAD )
          COMMIT_SHORT=$( git -C ${CHECKOUT} rev-parse --short HEAD )
          DATE=$( git -C ${CHECKOUT} log -1 --format=%cI )
          TIMESTAMP_DIR=$( date -d ${DATE} -u +%Y/%m/%d )

          node internal/scripts/perf/bin/ts-perf benchmark tsc \
            --cpus ${TSPERF_AGENT_BENCHMARK_CPU} \
            --iterations ${{ parameters.TSPERF_ITERATIONS }} \
            --tsc ${CHECKOUT}/built/local/tsc.js \
            ${{ parameters.TSPERF_SCENARIOS }} \
            --date ${DATE} \
            --repositoryType git \
            --repositoryUrl ${REPOSITORY_URI} \
            --repositoryBranch ${BRANCH} \
            --repositoryCommit ${COMMIT} \
            --repositoryDate ${DATE} \
            ${{ parameters.TSPERF_HOSTS }}
        displayName: Run tsc benchmarks

      # TODO: other benchmark kinds
